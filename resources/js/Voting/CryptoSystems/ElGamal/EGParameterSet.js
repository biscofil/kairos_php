import EGPublicKey from "./EGPublicKey";
import EGSecretKey from "./EGSecretKey";
import {modPow, randBetween} from "bigint-crypto-utils";

export default class EGParameterSet {

    /**
     * @param p : BigInt
     * @param q : BigInt
     * @param g : BigInt
     */
    constructor(p, q, g) {
        this.p = p;
        this.q = q;
        this.g = g;
    }

    /**
     *
     * @return {EGSecretKey}
     */
    generate() {
        // get the value x
        let x = randBetween(this.q);
        let y = modPow(this.g, x, this.p);
        let pk = new EGPublicKey(this, y);
        return new EGSecretKey(x, pk);
    }

    /**
     *
     * @return {{p: string, q: string, g: string}}
     */
    toJSONObject() {
        return {
            g: this.g.toString(),
            p: this.p.toString(),
            q: this.q.toString()
        };
    }

    /**
     * @param d : Object
     * @returns {EGParameterSet}
     */
    static fromJSONObject(d) {
        return new EGParameterSet(
            BigInt("0x" + d.p),
            BigInt("0x" + d.q),
            BigInt("0x" + d.g)
        );
    };

    /**
     *
     * @param other : EGParameterSet
     * @return {boolean}
     */
    equals(other) {
        return this.p === other.p
            && this.q === other.q
            && this.g === other.g
    }

    /**
     * TODO CHECK!!!!!!
     * @return {EGParameterSet}
     */
    static get_bogus() {
        let q = 61329566248342901292543872769978950870633559608669337131139375508370458778917n;
        let g = 14887492224963187634282421537186040801304008017743492304481737382571933937568724473847106029915040150784031882206090286938661464458896494215273989547889201144857352611058572236578734319505128042602372864570426550855201448111746579871811249114781674309062693442442368697449970648232621880001709535143047913661432883287150003429802392229361583608686643243349727791976247247948618930423866180410558458272606627111270040091203073580238905303994472202930783207472394578498507764703191288249547659899997131166130259700604433891232298182348403175947450284433411265966789131024573629546048637848902243503970966798589660808533n;
        let p = 16328632084933010002384055033805457329601614771185955389739167309086214800406465799038583634953752941675645562182498120750264980492381375579367675648771293800310370964745767014243638518442553823973482995267304044326777047662957480269391322789378384619428596446446984694306187644767462460965622580087564339212631775817895958409016676398975671266179637898557687317076177218843233150695157881061257053019133078545928983562221396313169622475509818442661047018436264806901023966236718367204710755935899013750306107738002364137917426595737403871114187750804346564731250609196846638183903982387884578266136503697493474682071n;
        return new EGParameterSet(p, q, g);
    };
}
